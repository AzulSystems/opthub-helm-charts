{{- include "validateRequiredValues" . }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opthub-gateway
  namespace: {{ .Release.Namespace }}
  {{- with .Values.deployment.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}


---

{{- if eq true .Values.db.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db
  namespace: {{ .Release.Namespace }}
  labels:
    app: db
    {{- if .Values.db.applicationLabels }}
    {{- .Values.db.applicationLabels | toYaml | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.db.replicas }}
  serviceName: db
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
        {{- if .Values.db.podTemplateLabels }}
        {{- .Values.db.podTemplateLabels | toYaml | nindent 8 }}
        {{- end }}
      annotations:
        "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
    spec:
      {{- if .Values.db.spec }}
      {{- .Values.db.spec | toYaml | nindent 6 }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroupChangePolicy: OnRootMismatch
        fsGroup: 999
      containers:
      - name: db
        image: {{ .Values.registry.dockerhubMirror }}library/mariadb:{{ .Values.db.version }}
{{- if .Values.db.command }}
        command: {{- .Values.db.command | toYaml | nindent 8 }}
{{- end }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
          - name: "MYSQL_DATABASE"
            value: "azul"
          - name: "MARIADB_USER"
            valueFrom:
              secretKeyRef:
                name: {{ include "db.secretName" . }}
                key: {{ .Values.secrets.db.userNameSecretKey }}
          - name: "MARIADB_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: {{ include "db.secretName" . }}
                key: {{ .Values.secrets.db.passwordSecretKey }}
          - name: "MARIADB_RANDOM_ROOT_PASSWORD"
            value: "true"
        args:
          - "--innodb_data_file_path=azuldb:{{ div (include "_getDatabaseSizeInB" .) 1_048_576 }}M"
          - "--innodb_file_per_table=OFF"
          - "--innodb-defragment=1"
          - "--max_allowed_packet=256M"
          - "--max_connections=6000"
          - "--event-scheduler=ON"
          - "--query_cache_type=1"
          - "--query_cache_limit=10485760"
          - "--query_cache_size=1048576000"
        ports:
          - containerPort: 3306
{{- if .Values.db.resources }}
        resources: {{- .Values.db.resources | toYaml | nindent 10 }}
{{- end }}
{{- if .Values.db.persistentDataVolume.enabled }}
        volumeMounts:
          - name: data
            mountPath: "/var/lib/mysql"
{{- end }}
{{- if eq true .Values.db.azureVirtualNodes }}
      nodeSelector:
        kubernetes.io/role: agent
        kubernetes.io/os: linux
        type: virtual-kubelet
{{- else if .Values.db.nodeSelector }}
      nodeSelector: {{- .Values.db.nodeSelector | toYaml | nindent 8 }}
{{- end }}
{{- if eq true .Values.db.azureVirtualNodes }}
      tolerations:
        - key: virtual-kubelet.io/provider
          operator: Exists
        - key: azure.com/aci
          effect: NoSchedule
{{- else if .Values.db.tolerations }}
      tolerations: {{- .Values.db.tolerations | toYaml | nindent 8 }}
{{- end }}
{{- if .Values.db.persistentDataVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.db.persistentDataVolume.storageClassName }}
      resources:
        requests:
          storage: {{ .Values.db.persistentDataVolume.size }}
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: {{ .Release.Namespace }}
  labels:
    app: db
    {{- if .Values.db.serviceLabels }}
    {{- .Values.db.serviceLabels | toYaml | nindent 4 }}
    {{- end }}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 3306
      protocol: TCP
      name: db-server
  selector:
    app: db
{{- end }}


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  namespace: {{ .Release.Namespace }}
  labels:
    app: gateway
    {{- if .Values.gateway.applicationLabels }}
    {{- .Values.gateway.applicationLabels | toYaml | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ include "sizing.gateway.replicas" . }}
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
        {{- if .Values.gateway.podTemplateLabels }}
        {{- .Values.gateway.podTemplateLabels | toYaml | nindent 8 }}
        {{- end }}
      annotations:
        "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/q/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 1001
      {{- if .Values.gateway.spec }}
      {{- .Values.gateway.spec | toYaml | nindent 6 }}
      {{- end }}
      containers:
      - name: gateway
        image: {{ .Values.registry.opthub }}/opthub-gateway:{{ default .Chart.AppVersion .Values.appVersionOverride }}{{ .Values.gateway.versionSuffix }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
        {{- if .Values.gateway.command }}
        command: {{- .Values.gateway.command | toYaml | nindent 8 }}
        {{- end }}
        env:
{{- if eq "s3" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: s3
    {{- if eq "static" .Values.storage.s3.credentialsType }}
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_STATIC_PROVIDER_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ include "blobStorage.s3.secretName" . }}
                key: {{ .Values.secrets.blobStorage.s3.accessKeySecretKey }}
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_STATIC_PROVIDER_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "blobStorage.s3.secretName" . }}
                key: {{ .Values.secrets.blobStorage.s3.secretAccessKeySecretKey }}
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_TYPE
            value: static
    {{- end }}
          - name: ENGINE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: ENGINE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}compiler-engines/
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}persistent-profile/
          - name: QUARKUS_S3_CLOUD_REGION
            value: {{ .Values.storage.s3.region }}
{{- else if eq "gcp-blob" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: gcp-blob
          - name: ENGINE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: ENGINE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}compiler-engines/
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}persistent-profile/
{{- else if eq "azure-blob" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: azure-blob
          - name: BLOB_STORAGE_AZURE_BLOB_ENDPOINT
            value: {{ .Values.storage.azureBlob.endpoint }}
          - name: BLOB_STORAGE_AZURE_BLOB_AUTHMETHOD
            value: {{ .Values.storage.azureBlob.authMethod }}
  {{- if and (eq "sas-token" .Values.storage.azureBlob.authMethod) .Values.secrets.blobStorage.azure.sasToken }}
          - name: BLOB_STORAGE_AZURE_BLOB_SASTOKEN
            valueFrom:
              secretKeyRef:
                name: {{ include "azure.storage.secretName" . }}
                key: {{ .Values.secrets.blobStorage.azure.sasTokenSecretKey }}
  {{- end  }}
  {{- if and (eq "connection-string" .Values.storage.azureBlob.authMethod) .Values.secrets.blobStorage.azure.connectionString }}
          - name: BLOB_STORAGE_AZURE_BLOB_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ include "azure.storage.secretName" . }}
                key: {{ .Values.secrets.blobStorage.azure.connectionStringSecretKey }}
  {{- end  }}
          - name: ENGINE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: ENGINE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}compiler-engines/
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}persistent-profile/
{{- end  }}
        args:
        - "-XX:+ExitOnOutOfMemoryError"
        - "-XX:MaxRAMPercentage=80"
        - "-XX:-OmitStackTraceInFastThrow"
        - "-Dvm.session-statistics.log.client-continuously-blocked-threshold={{ .Values.operator.timeToClearOptimizationBacklog}}"
{{- if .Values.storage.s3.storageEndpoint }}
        - "-Dquarkus.s3.endpoint-override={{ .Values.storage.s3.storageEndpoint }}"
{{- end  }}
{{- if .Values.compilations.concurrencyBoost }}
        - "-Dvm.default-concurency-boost={{ .Values.compilations.concurrencyBoost }}"
{{- end  }}
        - "-Dcompilation.limit.per.vm={{ .Values.compilations.parallelism.limitPerVm }}"
        - "-Dcompilation.limit.vm-min-version={{ .Values.compilations.minVmVersionForCNCCompilation }}"
        - "-Dquarkus.hazelcast-client.cluster-members=cache:5701"
        - "-Dvm.sessions.persist-to-inventory={{ .Values.inventory.enabled }}"
        - "-Dreadynoworchestrator.debug-info-history-length={{ .Values.readyNowOrchestrator.debugInfoHistoryLength }}"
        - "-Dreadynoworchestrator.completed-after={{ .Values.readyNowOrchestrator.completedAfter }}"
        - "-Dreadynoworchestrator.completion-grace-period={{ .Values.readyNowOrchestrator.completionGracePeriod }}"
        - "-Dreadynoworchestrator.cache.enabled={{ .Values.readyNowOrchestrator.cache.enabled }}"
        - "-Dreadynoworchestrator.cache.max-size-bytes={{ .Values.readyNowOrchestrator.cache.maxSizeBytes | int64 }}"
        - "-Dreadynoworchestrator.producers.continue-recording-on-promotion={{ .Values.readyNowOrchestrator.producers.continueRecordingOnPromotion }}"
        - "-Dreadynoworchestrator.producers.max-concurrent-recordings={{ .Values.readyNowOrchestrator.producers.maxConcurrentRecordings }}"
        - "-Dreadynoworchestrator.producers.max-promotable-generation={{ .Values.readyNowOrchestrator.producers.maxPromotableGeneration }}"
        - "-Dreadynoworchestrator.producers.max-profile-size={{ .Values.readyNowOrchestrator.producers.maxProfileSize }}"
        - "-Dreadynoworchestrator.promotion.min-profile-size={{ .Values.readyNowOrchestrator.promotion.minProfileSize | int64 }}"
        - "-Dreadynoworchestrator.promotion.min-profile-duration={{ .Values.readyNowOrchestrator.promotion.minProfileDuration }}"
        - "-Dreadynoworchestrator.promotion.min-profile-size-per-generation={{ include "getPromotionMinProfileSizePerGeneration" . }}"
        - "-Dreadynoworchestrator.promotion.min-profile-duration-per-generation={{ include "getPromotionMinProfileDurationPerGeneration" . }}"
        - "-Dreadynoworchestrator.cleaner.enabled={{ .Values.readyNowOrchestrator.cleaner.enabled }}"
        - "-Dreadynoworchestrator.cleaner.target-size={{ include "_getProfilesEvictionTargetSizeInB" . }}"
        - "-Dreadynoworchestrator.cleaner.warning-size={{ include "_getProfilesWarningSizeInB" . }}"
        - "-Dreadynoworchestrator.cleaner.keep-unrequested-profile-names-for={{ .Values.readyNowOrchestrator.cleaner.keepUnrequestedProfileNamesFor }}"
        - "-Dreadynoworchestrator.cleaner.keep-debug-only-generation-profiles-for={{ .Values.readyNowOrchestrator.cleaner.keepDebugOnlyGenerationProfilesFor }}"
  {{- if .Values.gateway.resources }}
        - "-Dquarkus.grpc.server.instances={{ ceil .Values.gateway.resources.requests.cpu }}"
{{- end}}
{{- if and .Values.ssl.enabled (not .Values.gwProxy.enabled) }}
        - "-Dquarkus.grpc.server.ssl.certificate=/opt/ssl/cert.pem"
        - "-Dquarkus.grpc.server.ssl.key=/opt/ssl/key.pem"
{{- if .Values.ssl.mtls.enabled }}
        - "-Dquarkus.grpc.server.ssl.client-auth=required"
        - "-Dquarkus.grpc.server.ssl.trust-store=/opt/ssl/client-truststore.p12"
        - "-Dquarkus.grpc.server.ssl.trust-store-password={{ .Values.ssl.mtls.password }}"
{{- end }}
{{- end }}
{{- if .Values.gateway.extraArguments }}
        {{- .Values.gateway.extraArguments | toYaml | nindent 8 }}
{{- end }}
{{- if .Values.gateway.extraArgumentsMap }}
    {{- range $key, $val := .Values.gateway.extraArgumentsMap }}
        - -D{{ $key }}={{ $val }}
    {{- end }}
{{- end }}
        ports:
        - containerPort: 8080
          name: http-endpoint
        - containerPort: 50051
          name: grpc-external
{{- if .Values.gateway.resources }}
        resources: {{- .Values.gateway.resources | toYaml | nindent 10 }}
{{- end }}
        {{- if ne true .Values.gateway.disableKubernetesProbes }}
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: http-endpoint
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: http-endpoint
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /q/health/started
            port: http-endpoint
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 5
          failureThreshold: 18
        {{- end }}
        volumeMounts:
          - name: tmp-volume
            mountPath: /tmp
{{- if and .Values.ssl.enabled (not .Values.gwProxy.enabled) }}
          - mountPath: "/opt/ssl"
            name: ssl-cert
            readOnly: true
{{- end }}
      volumes:
        - name: tmp-volume
          emptyDir:
{{- if (((.Values.gateway).resources).limits) }}
            sizeLimit: {{ get .Values.gateway.resources.limits "ephemeral-storage" }}
{{- end }}
{{- if and .Values.ssl.enabled (not .Values.gwProxy.enabled) }}
        - name: ssl-cert
          secret:
            secretName: {{ include "ssl.secretName" . }}
{{- end }}
      serviceAccountName: opthub-gateway
{{- if eq true .Values.gateway.azureVirtualNodes }}
      nodeSelector:
        kubernetes.io/role: agent
        kubernetes.io/os: linux
        type: virtual-kubelet
{{- else if .Values.gateway.nodeSelector }}
      nodeSelector: {{- .Values.gateway.nodeSelector | toYaml | nindent 8 }}
{{- end }}
{{- if eq true .Values.gateway.azureVirtualNodes }}
      tolerations:
        - key: virtual-kubelet.io/provider
          operator: Exists
        - key: azure.com/aci
          effect: NoSchedule
{{- else if .Values.gateway.tolerations }}
      tolerations: {{- .Values.gateway.tolerations | toYaml | nindent 8 }}
{{- end }}
{{- if and ( ne true .Values.gateway.azureVirtualNodes ) .Values.gateway.affinity }}
      affinity: {{- .Values.gateway.affinity | toYaml | nindent 8 }}
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: gateway
  namespace: {{ .Release.Namespace }}
  labels:
    app: gateway
    {{- if .Values.gateway.serviceLabels }}
    {{- .Values.gateway.serviceLabels | toYaml | nindent 4 }}
    {{- end }}
{{- if .Values.gateway.service.annotations }}
  annotations: {{- .Values.gateway.service.annotations | toYaml | nindent 4 }}
{{- end }}
spec:
  ports:
{{- if .Values.gateway.service.httpEndpoint.enabled }}
    - port: {{ .Values.gateway.service.httpEndpoint.port }}
      protocol: TCP
      name: http-server
      targetPort: 8080
{{- end }}
    - name: grpc-server
      protocol: TCP
      port: {{ .Values.gateway.service.grpc.port }}
      targetPort: 50051
{{- if  .Values.gwProxy.enabled }}
  selector:
    app: gw-proxy
  type: LoadBalancer
{{- else }}
  selector:
    app: gateway
  type: {{ .Values.gateway.service.type }}
{{- end }}

{{- if and .Values.autoscaler .Values.gateway.autoscaler.enabled}}
{{- if eq "hpa" .Values.gateway.autoscaler.mode}}
---
# Dependence on metric-server
{{- if .Capabilities.APIVersions.Has "autoscaling/v2" }}
apiVersion: autoscaling/v2
{{- else }}
apiVersion: autoscaling/v2beta2
{{- end }}
kind: HorizontalPodAutoscaler
metadata:
  name: gateway
  namespace: {{ .Release.Namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gateway
  minReplicas: {{ include "sizing.gateway.minReplicas" . }}
  maxReplicas: {{ include "sizing.gateway.maxReplicas" . }}
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
{{- end }}
{{- end }}
