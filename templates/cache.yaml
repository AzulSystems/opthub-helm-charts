---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cache
  namespace: {{ .Release.Namespace }}
  labels:
    app: cache
    {{- if .Values.cache.applicationLabels }}
    {{- .Values.cache.applicationLabels | toYaml | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ include "sizing.cache.replicas" . }}
  podManagementPolicy: Parallel
  serviceName: cache
  selector:
    matchLabels:
      app: cache
  template:
    metadata:
      labels:
        app: cache
        {{- if .Values.cache.podTemplateLabels }}
        {{- .Values.cache.podTemplateLabels | toYaml | nindent 8 }}
        {{- end }}
      annotations:
        "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
        prometheus.io/scrape: "true"
        prometheus.io/path: "/q/metrics"
        prometheus.io/port: "8080"
    spec:
      {{- if .Values.cache.spec }}
      {{- .Values.cache.spec | toYaml | nindent 6 }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 1001
      containers:
      - name: cache
        image: {{ .Values.registry.opthub }}/opthub-hazelcast:{{ default .Chart.AppVersion .Values.appVersionOverride }}{{ .Values.cache.versionSuffix }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
        {{- if .Values.cache.command }}
        command: {{- .Values.cache.command | toYaml | nindent 8 }}
        {{- end }}
        ports:
        - containerPort: 5701
          name: ch-server
        - containerPort: 8080
          name: metrics
        - containerPort: {{ .Values.cache.ports.internalGrpcPort }}
          name: grpc

{{- if ne true .Values.cache.disableKubernetesProbes }}
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: metrics
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: metrics
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /q/health/started
            port: metrics
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 5
          failureThreshold: 10
{{- end }}

        env:
          - name: MAPLOADERS_STORAGE_TYPE
            value: blobstore
{{- if .Values.codeCache.storage.offloadReadOperations }}
          - name: MAPLOADERS_OFFLOAD_ENABLED
            value: "true"
{{- else }}
          - name: MAPLOADERS_OFFLOAD_ENABLED
            value: "false"
{{- end }}
{{- if .Values.codeCache.storage.writeBehindStorageMethod }}
{{- else }}
          - name: MAPLOADERS_BUCKETSBYCOMPILATIONHASHDBCACHE_WRITE_DELAY_SECONDS
            value: "0"
          - name: MAPLOADERS_CACHEITEMDBCACHEV2_WRITE_DELAY_SECONDS
            value: "0"
{{- end }}

{{- if eq "s3" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: s3
    {{- if eq "static" .Values.storage.s3.credentialsType }}
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_STATIC_PROVIDER_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ include "blobStorage.s3.secretName" . }}
                key: {{ .Values.secrets.blobStorage.s3.accessKeySecretKey }}
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_STATIC_PROVIDER_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "blobStorage.s3.secretName" . }}
                key: {{ .Values.secrets.blobStorage.s3.secretAccessKeySecretKey }}
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_TYPE
            value: static
    {{- end }}
          - name: ENGINE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: ENGINE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}compiler-engines/
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}persistent-profile/
          - name: MAPLOADERS_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: MAPLOADERS_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}code-cache/
          - name: SCALING_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: SCALING_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}scaling/
          - name: INVENTORY_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: INVENTORY_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}inventory/
          - name: QUARKUS_S3_CLOUD_REGION
            value: {{ .Values.storage.s3.region }}
{{- else if eq "gcp-blob" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: gcp-blob
          - name: ENGINE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: ENGINE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}compiler-engines/
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}persistent-profile/
          - name: MAPLOADERS_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: MAPLOADERS_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}code-cache/
          - name: SCALING_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: SCALING_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}scaling/
          - name: INVENTORY_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: INVENTORY_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}inventory/
{{- else if eq "azure-blob" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: azure-blob
          - name: BLOB_STORAGE_AZURE_BLOB_ENDPOINT
            value: {{ .Values.storage.azureBlob.endpoint }}
          - name: BLOB_STORAGE_AZURE_BLOB_AUTHMETHOD
            value: {{ .Values.storage.azureBlob.authMethod }}
  {{- if and (eq "sas-token" .Values.storage.azureBlob.authMethod) .Values.secrets.blobStorage.azure.sasToken }}
          - name: BLOB_STORAGE_AZURE_BLOB_SASTOKEN
            valueFrom:
              secretKeyRef:
                name: {{ include "azure.storage.secretName" . }}
                key: {{ .Values.secrets.blobStorage.azure.sasTokenSecretKey }}
  {{- end }}
  {{- if and (eq "connection-string" .Values.storage.azureBlob.authMethod) .Values.secrets.blobStorage.azure.connectionString }}
          - name: BLOB_STORAGE_AZURE_BLOB_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ include "azure.storage.secretName" . }}
                key: {{ .Values.secrets.blobStorage.azure.connectionStringSecretKey }}
  {{- end  }}
          - name: ENGINE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: ENGINE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}compiler-engines/
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}persistent-profile/
          - name: MAPLOADERS_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: MAPLOADERS_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}code-cache/
          - name: SCALING_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: SCALING_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}scaling/
          - name: INVENTORY_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: INVENTORY_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}inventory/
{{- end  }}
        args:
          - "-XX:InitialRAMPercentage=80"
          - "-XX:MaxRAMPercentage=80"
          - "-XX:+ExitOnOutOfMemoryError"
          - "-XX:-OmitStackTraceInFastThrow"
          - "-Dhazelcast.kubernetes.enabled=true"
          - "-Dhazelcast.kubernetes.namespace={{ .Release.Namespace }}"
          - "-Dhazelcast.kubernetes.service-name=cache"
{{- if .Values.storage.s3.storageEndpoint }}
          - "-Dquarkus.s3.endpoint-override={{ .Values.storage.s3.storageEndpoint }}"
{{- end  }}
          - "-Dhazelcast.graceful.shutdown.max.wait={{ max 0 (sub .Values.cache.terminationGracePeriodSeconds 15) }}"
          - "-Dreadynoworchestrator.completed-after={{ .Values.readyNowOrchestrator.completedAfter }}"
          - "-Dreadynoworchestrator.completion-grace-period={{ .Values.readyNowOrchestrator.completionGracePeriod }}"
          - "-Dreadynoworchestrator.cleaner.target-size={{ include "_getProfilesEvictionTargetSizeInB" . }}"
          - "-Dreadynoworchestrator.cleaner.enabled={{ .Values.readyNowOrchestrator.cleaner.enabled }}"
          - "-Dreadynoworchestrator.cleaner.warning-size={{ include "_getProfilesWarningSizeInB" . }}"
          - "-Dreadynoworchestrator.cleaner.keep-unrequested-profile-names-for={{ .Values.readyNowOrchestrator.cleaner.keepUnrequestedProfileNamesFor }}"
          - "-Dreadynoworchestrator.cleaner.keep-debug-only-generation-profiles-for={{ .Values.readyNowOrchestrator.cleaner.keepDebugOnlyGenerationProfilesFor }}"
          - "-Dinventory.eviction.enabled={{ .Values.inventory.enabled }}"
          - "-Dinventory.eviction.interval={{ .Values.inventory.cleaner.interval }}"
          - "-Dinventory.eviction.keep-unused-profile-names-for={{ .Values.readyNowOrchestrator.cleaner.keepUnrequestedProfileNamesFor }}"
          - "-Dcodecache.eviction.enabled={{ .Values.codeCache.cleaner.enabled }}"
          - "-Dcodecache.eviction.interval={{ .Values.codeCache.cleaner.interval }}"
          - "-Dcodecache.eviction.target-size={{ .Values.codeCache.cleaner.targetSize }}"
          - "-Dquarkus.grpc.server.port={{ .Values.cache.ports.internalGrpcPort }}"
{{- if .Values.cache.extraArguments }}
          {{- .Values.cache.extraArguments | toYaml | nindent 10 }}
{{- end }}
{{- if .Values.cache.extraArgumentsMap }}
    {{- range $key, $val := .Values.cache.extraArgumentsMap }}
          - -D{{ $key }}={{ $val }}
    {{- end }}
{{- end }}
        {{- if .Values.cache.resources }}
        resources: {{- .Values.cache.resources | toYaml | nindent 10 }}
        {{- end }}
        volumeMounts:
          - name: tmp-volume
            mountPath: /tmp
      volumes:
        - name: tmp-volume
          emptyDir:
{{- if (((.Values.cache).resources).limits) }}
            sizeLimit: {{ get .Values.cache.resources.limits "ephemeral-storage" }}
{{- end }}
      terminationGracePeriodSeconds: {{ .Values.cache.terminationGracePeriodSeconds }}
      serviceAccountName: {{ include "cache.serviceAccount" . }}
{{- if eq true .Values.cache.azureVirtualNodes }}
      nodeSelector:
        kubernetes.io/role: agent
        kubernetes.io/os: linux
        type: virtual-kubelet
{{- else if .Values.cache.nodeSelector }}
      nodeSelector: {{- .Values.cache.nodeSelector | toYaml | nindent 8 }}
{{- end }}
{{- if eq true .Values.cache.azureVirtualNodes }}
      tolerations:
        - key: virtual-kubelet.io/provider
          operator: Exists
        - key: azure.com/aci
          effect: NoSchedule
{{- else if .Values.cache.tolerations }}
      tolerations: {{- .Values.cache.tolerations | toYaml | nindent 8 }}
{{- end }}
{{- if and ( ne true .Values.gateway.azureVirtualNodes ) .Values.cache.affinity }}
      affinity: {{- .Values.cache.affinity | toYaml | nindent 8 }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: cache
  namespace: {{ .Release.Namespace }}
  labels:
    app: cache
    {{- if .Values.cache.serviceLabels }}
    {{- .Values.cache.serviceLabels | toYaml | nindent 4 }}
    {{- end }}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 5701
      protocol: TCP
      name: cache-server
  selector:
    app: cache

{{- if and .Values.autoscaler .Values.cache.autoscaler.enabled}}
{{- if eq "hpa" .Values.cache.autoscaler.mode}}
---
# Dependence on metric-server
{{- if .Capabilities.APIVersions.Has "autoscaling/v2" }}
apiVersion: autoscaling/v2
{{- else }}
apiVersion: autoscaling/v2beta2
{{- end }}
kind: HorizontalPodAutoscaler
metadata:
  name: cache
  namespace: {{ .Release.Namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: cache
  minReplicas: {{ include "sizing.cache.minReplicas" . }}
  maxReplicas: {{ include "sizing.cache.maxReplicas" . }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
  behavior:
    scaleDown:
      policies:
        - type: Percent
          value: 10
          periodSeconds: 120

{{- end }}
{{- end }}

{{- if and (eq "" .Values.deployment.serviceAccount.existingServiceAccount) (eq "" .Values.cache.existingServiceAccount) }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "cache.serviceAccount" . }}
  namespace: {{ .Release.Namespace }}
  {{- with .Values.deployment.serviceAccount.labels }}
  labels:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.deployment.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: opthub-cache-role
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
      - pods
      - services
    verbs:
      - get
      - list


---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: opthub-cache-role-binding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: opthub-cache-role
subjects:
  - kind: ServiceAccount
    name: {{ include "cache.serviceAccount" . }}
    namespace: {{ .Release.Namespace }}
