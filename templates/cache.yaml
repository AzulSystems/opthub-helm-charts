---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cache
  namespace: {{ .Release.Namespace }}
  labels:
    app: cache
    {{- if .Values.cache.applicationLabels }}
    {{- .Values.cache.applicationLabels | toYaml | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ include "sizing.cache.replicas" . }}
  podManagementPolicy: Parallel
  serviceName: cache
  selector:
    matchLabels:
      app: cache
  template:
    metadata:
      labels:
        app: cache
        {{- if .Values.cache.podTemplateLabels }}
        {{- .Values.cache.podTemplateLabels | toYaml | nindent 8 }}
        {{- end }}
      annotations:
        "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
        prometheus.io/scrape: "true"
        prometheus.io/path: "/q/metrics"
        prometheus.io/port: "8080"
    spec:
      {{- if .Values.cache.spec }}
      {{- .Values.cache.spec | toYaml | nindent 6 }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
      containers:
      - name: cache
        image: {{ .Values.registry.opthub }}/opthub-hazelcast:{{ default .Chart.AppVersion .Values.appVersionOverride }}{{ .Values.cache.versionSuffix }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if .Values.cache.command }}
        command: {{- .Values.cache.command | toYaml | nindent 8 }}
        {{- end }}
        ports:
        - containerPort: 5701
          name: ch-server
        - containerPort: 8080
          name: metrics
        - containerPort: 50071
          name: grpc

{{- if ne true .Values.cache.disableKubernetesProbes }}
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: metrics
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: metrics
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /q/health/started
            port: metrics
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 5
          failureThreshold: 10
{{- end }}

        env:
{{- if eq "sqldb" .Values.codeCache.storageType }}
          - name: MAPLOADERS_STORAGE_TYPE
            value: sqldb
{{- else if eq "blobstore" .Values.codeCache.storageType }}
          - name: MAPLOADERS_STORAGE_TYPE
            value: blobstore
{{- else }}
          - name: MAPLOADERS_STORAGE_TYPE
            value: unsupported
{{- end }}
{{- if .Values.codeCache.storage.offloadReadOperations }}
          - name: MAPLOADERS_OFFLOAD_ENABLED
            value: "true"
{{- else }}
          - name: MAPLOADERS_OFFLOAD_ENABLED
            value: "false"
{{- end }}
{{- if .Values.codeCache.storage.writeBehindStorageMethod }}
{{- else }}
          - name: MAPLOADERS_BUCKETSBYCOMPILATIONHASHDBCACHE_WRITE_DELAY_SECONDS
            value: "0"
          - name: MAPLOADERS_CACHEITEMDBCACHEV2_WRITE_DELAY_SECONDS
            value: "0"
{{- end }}

{{- if eq "s3" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: s3
    {{- if eq "static" .Values.storage.s3.credentialsType }}
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_STATIC_PROVIDER_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: blob-storage-credentials
                key: blob-storage-accesskey
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_STATIC_PROVIDER_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: blob-storage-credentials
                key: blob-storage-secretkey
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_TYPE
            value: static
    {{- end }}
          - name: ENGINE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: ENGINE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}compiler-engines/
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}persistent-profile/
          - name: MAPLOADERS_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: MAPLOADERS_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}code-cache/
          - name: QUARKUS_S3_CLOUD_REGION
            value: {{ .Values.storage.s3.region }}
{{- else if eq "gcp-blob" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: gcp-blob
          - name: ENGINE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: ENGINE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}compiler-engines/
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}persistent-profile/
          - name: MAPLOADERS_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: MAPLOADERS_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}code-cache/

{{- else if eq "azure-blob" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: azure-blob
          - name: BLOB_STORAGE_AZURE_BLOB_ENDPOINT
            value: {{ .Values.storage.azureBlob.endpoint }}
          - name: BLOB_STORAGE_AZURE_BLOB_AUTHMETHOD
            value: {{ .Values.storage.azureBlob.authMethod }}
  {{- if and (eq "sas-token" .Values.storage.azureBlob.authMethod) .Values.secrets.azure.blobStorage.sasToken }}
          - name: BLOB_STORAGE_AZURE_BLOB_SASTOKEN
            valueFrom:
              secretKeyRef:
                name: azure-storage-credentials
                key: azure-storage-sas-token
  {{- end }}
  {{- if and (eq "connection-string" .Values.storage.azureBlob.authMethod) .Values.secrets.azure.blobStorage.connectionString }}
          - name: BLOB_STORAGE_AZURE_BLOB_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: azure-storage-credentials
                key: azure-storage-connection-string
  {{- end  }}
          - name: ENGINE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: ENGINE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}compiler-engines/
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: READYNOWORCHESTRATOR_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}persistent-profile/
          - name: MAPLOADERS_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: MAPLOADERS_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}code-cache/
{{- end  }}
{{- if eq true .Values.db.enabled }}
          - name: QUARKUS_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                name: infrastructure-credentials
                key: mariadb-username
          - name: QUARKUS_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: infrastructure-credentials
                key: mariadb-password
{{- end }}
        args:
          - "-XX:InitialRAMPercentage=80"
          - "-XX:MaxRAMPercentage=80"
          - "-XX:+ExitOnOutOfMemoryError"
          - "-XX:-OmitStackTraceInFastThrow"
          - "-Dhazelcast.kubernetes.enabled=true"
          - "-Dhazelcast.kubernetes.namespace={{ .Release.Namespace }}"
          - "-Dhazelcast.kubernetes.service-name=cache"
{{- if .Values.storage.s3.storageEndpoint }}
          - "-Dquarkus.s3.endpoint-override={{ .Values.storage.s3.storageEndpoint }}"
{{- end  }}
{{- if .Values.db.schemaRecreateRegularCheck }}
          - "-Ddbschema.auto-recreate.enabled=true"
{{- end }}
{{- if eq true .Values.db.enabled }}
          - "-Dquarkus.datasource.jdbc.url=jdbc:mariadb://db:3306/azul?useBulkStmt=true&rewriteBatchedStatements=true"
{{- else }}
          - "-Dquarkus.datasource.jdbc.url=dummy-value"
          - "-Dquarkus.datasource.\"<default>\".health-exclude=true"
          - "-Dquarkus.flyway.migrate-at-start=false"
{{- end }}
          - "-Dquarkus.datasource.jdbc.max-size=100"
          - "-Dhazelcast.graceful.shutdown.max.wait=300"
          - "-Dcodecache.eviction.enabled={{ .Values.codeCache.cleaner.enabled }}"
          - "-Dcodecache.eviction.interval={{ .Values.codeCache.cleaner.interval }}"
          - "-Dcodecache.eviction.target-size={{ include "_getCodecacheEvictionTargetSizeInB" . }}"
{{- if .Values.cache.extraArguments }}
          {{- .Values.cache.extraArguments | toYaml | nindent 10 }}
{{- end }}
{{- if .Values.cache.extraArgumentsMap }}
    {{- range $key, $val := .Values.cache.extraArgumentsMap }}
          - -D{{ $key }}={{ $val }}
    {{- end }}
{{- end }}
        {{- if .Values.cache.resources }}
        resources: {{- .Values.cache.resources | toYaml | nindent 10 }}
        {{- end }}
      terminationGracePeriodSeconds: 300
      serviceAccountName: opthub-cache
{{- if eq true .Values.cache.azureVirtualNodes }}
      nodeSelector:
        kubernetes.io/role: agent
        kubernetes.io/os: linux
        type: virtual-kubelet
{{- else if .Values.cache.nodeSelector }}
      nodeSelector: {{- .Values.cache.nodeSelector | toYaml | nindent 8 }}
{{- end }}
{{- if eq true .Values.cache.azureVirtualNodes }}
      tolerations:
        - key: virtual-kubelet.io/provider
          operator: Exists
        - key: azure.com/aci
          effect: NoSchedule
{{- else if .Values.cache.tolerations }}
      tolerations: {{- .Values.cache.tolerations | toYaml | nindent 8 }}
{{- end }}
{{- if and ( ne true .Values.gateway.azureVirtualNodes ) .Values.cache.affinity }}
      affinity: {{- .Values.cache.affinity | toYaml | nindent 8 }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: cache
  namespace: {{ .Release.Namespace }}
  labels:
    app: cache
    {{- if .Values.cache.serviceLabels }}
    {{- .Values.cache.serviceLabels | toYaml | nindent 4 }}
    {{- end }}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 5701
      protocol: TCP
      name: cache-server
  selector:
    app: cache

{{- if and .Values.autoscaler .Values.cache.autoscaler.enabled}}
{{- if eq "hpa" .Values.cache.autoscaler.mode}}
---
# Dependence on metric-server
{{- if .Capabilities.APIVersions.Has "autoscaling/v2" }}
apiVersion: autoscaling/v2
{{- else }}
apiVersion: autoscaling/v2beta2
{{- end }}
kind: HorizontalPodAutoscaler
metadata:
  name: cache
  namespace: {{ .Release.Namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: cache
  minReplicas: {{ include "sizing.cache.minReplicas" . }}
  maxReplicas: {{ include "sizing.cache.maxReplicas" . }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
  behavior:
    scaleDown:
      policies:
        - type: Percent
          value: 10
          periodSeconds: 120

{{- end }}
{{- end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opthub-cache
  namespace: {{ .Release.Namespace }}
  {{- with .Values.deployment.serviceAccount.labels }}
  labels:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.deployment.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: opthub-cache-role
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
      - pods
      - services
    verbs:
      - get
      - list


---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: opthub-cache-role-binding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: opthub-cache-role
subjects:
  - kind: ServiceAccount
    name: opthub-cache
    namespace: {{ .Release.Namespace }}
