{{- include "validateRequiredValues" . }}

{{- if and ((.Values.logStore).enabled) (eq ((.Values.logStore).deploymentMode) "dedicatedService") }}

{{- if and (eq "" .Values.deployment.serviceAccount.existingServiceAccount) (eq "" .Values.logStore.existingServiceAccount)}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "logStore.serviceAccount" . }}
  namespace: {{ .Release.Namespace }}
  {{- with .Values.deployment.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-store
  namespace: {{ .Release.Namespace }}
  labels:
    app: log-store
    {{- if .Values.logStore.applicationLabels }}
    {{- .Values.logStore.applicationLabels | toYaml | nindent 4 }}
    {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: log-store
  template:
    metadata:
      labels:
        app: log-store
        {{- if .Values.logStore.podTemplateLabels }}
        {{- .Values.logStore.podTemplateLabels | toYaml | nindent 8 }}
        {{- end }}
      annotations:
        "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/q/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 1001
      {{- if .Values.logStore.spec }}
      {{- .Values.logStore.spec | toYaml | nindent 6 }}
      {{- end }}
      containers:
      - name: log-store
        image: {{ .Values.registry.opthub }}/opthub-gateway:{{ default .Chart.AppVersion .Values.appVersionOverride }}{{ .Values.logStore.versionSuffix }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
        {{- if .Values.logStore.command }}
        command: {{- .Values.logStore.command | toYaml | nindent 8 }}
        {{- end }}
        env:
{{- if eq "s3" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: s3
    {{- if eq "static" .Values.storage.s3.credentialsType }}
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_STATIC_PROVIDER_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ include "blobStorage.s3.secretName" . }}
                key: {{ .Values.secrets.blobStorage.s3.accessKeySecretKey }}
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_STATIC_PROVIDER_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "blobStorage.s3.secretName" . }}
                key: {{ .Values.secrets.blobStorage.s3.secretAccessKeySecretKey }}
          - name: QUARKUS_S3_CLOUD_CREDENTIALS_TYPE
            value: static
    {{- end }}
          - name: QUARKUS_S3_CLOUD_REGION
            value: {{ .Values.storage.s3.region }}
          - name: LOGSTORE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.s3.commonBucket }}
          - name: LOGSTORE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}log-store/
{{- else if eq "gcp-blob" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: gcp-blob
          - name: LOGSTORE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.gcpBlob.commonBucket }}
          - name: LOGSTORE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}log-store/
{{- else if eq "azure-blob" .Values.storage.blobStorageService }}
          - name: BLOB_STORAGE_STORAGE_SERVICE
            value: azure-blob
          - name: BLOB_STORAGE_AZURE_BLOB_ENDPOINT
            value: {{ .Values.storage.azureBlob.endpoint }}
          - name: BLOB_STORAGE_AZURE_BLOB_AUTHMETHOD
            value: {{ .Values.storage.azureBlob.authMethod }}
  {{- if and (eq "sas-token" .Values.storage.azureBlob.authMethod) .Values.secrets.blobStorage.azure.sasToken }}
          - name: BLOB_STORAGE_AZURE_BLOB_SASTOKEN
            valueFrom:
              secretKeyRef:
                name: {{ include "azure.storage.secretName" . }}
                key: {{ .Values.secrets.blobStorage.azure.sasTokenSecretKey }}
  {{- end  }}
  {{- if and (eq "connection-string" .Values.storage.azureBlob.authMethod) .Values.secrets.blobStorage.azure.connectionString }}
          - name: BLOB_STORAGE_AZURE_BLOB_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ include "azure.storage.secretName" . }}
                key: {{ .Values.secrets.blobStorage.azure.connectionStringSecretKey }}
  {{- end  }}
          - name: LOGSTORE_STORAGE_LOCATION_BUCKET
            value: {{ .Values.storage.azureBlob.container }}
          - name: LOGSTORE_STORAGE_LOCATION_PATH_PREFIX
            value: {{ include "storageLocationPathPrefixWithNamespace" . }}log-store/
{{- end  }}
        args:
        - "-XX:+ExitOnOutOfMemoryError"
        - "-XX:MaxRAMPercentage=60"
        - "-XX:-OmitStackTraceInFastThrow"
        - "-Dlogstore.enabled=true"
{{- if .Values.storage.s3.storageEndpoint }}
        - "-Dquarkus.s3.endpoint-override={{ .Values.storage.s3.storageEndpoint }}"
{{- end  }}
        - "-Dquarkus.hazelcast-client.cluster-members=cache:5701"
  {{- if .Values.logStore.resources }}
        - "-Dquarkus.grpc.server.instances={{ ceil .Values.logStore.resources.requests.cpu }}"
{{- end}}
{{- if .Values.logStore.extraArguments }}
        {{- .Values.logStore.extraArguments | toYaml | nindent 8 }}
{{- end }}
{{- if .Values.logStore.extraArgumentsMap }}
    {{- range $key, $val := .Values.logStore.extraArgumentsMap }}
        - -D{{ $key }}={{ $val }}
    {{- end }}
{{- end }}
        ports:
        - containerPort: 8080
          name: http-endpoint
        - containerPort: 50051
          name: grpc-external
{{- if .Values.logStore.resources }}
        resources: {{- .Values.logStore.resources | toYaml | nindent 10 }}
{{- end }}
        {{- if ne true .Values.logStore.disableKubernetesProbes }}
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: http-endpoint
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: http-endpoint
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /q/health/started
            port: http-endpoint
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 5
          failureThreshold: 18
        {{- end }}
        volumeMounts:
          - name: tmp-volume
            mountPath: /tmp
      volumes:
        - name: tmp-volume
          emptyDir:
{{- if (((.Values.logStore).resources).limits) }}
            sizeLimit: {{ get .Values.logStore.resources.limits "ephemeral-storage" }}
{{- end }}
      serviceAccountName: {{ include "logStore.serviceAccount" . }}
{{- if eq true .Values.logStore.azureVirtualNodes }}
      nodeSelector:
        kubernetes.io/role: agent
        kubernetes.io/os: linux
        type: virtual-kubelet
{{- else if .Values.logStore.nodeSelector }}
      nodeSelector: {{- .Values.logStore.nodeSelector | toYaml | nindent 8 }}
{{- end }}
{{- if eq true .Values.logStore.azureVirtualNodes }}
      tolerations:
        - key: virtual-kubelet.io/provider
          operator: Exists
        - key: azure.com/aci
          effect: NoSchedule
{{- else if .Values.logStore.tolerations }}
      tolerations: {{- .Values.logStore.tolerations | toYaml | nindent 8 }}
{{- end }}
{{- if and ( ne true .Values.logStore.azureVirtualNodes ) .Values.logStore.affinity }}
      affinity: {{- .Values.logStore.affinity | toYaml | nindent 8 }}
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: log-store
  namespace: {{ .Release.Namespace }}
  labels:
    app: log-store
    {{- if .Values.logStore.serviceLabels }}
    {{- .Values.logStore.serviceLabels | toYaml | nindent 4 }}
    {{- end }}
{{- if .Values.logStore.service.annotations }}
  annotations: {{- .Values.logStore.service.annotations | toYaml | nindent 4 }}
{{- end }}
spec:
  ports:
{{- if .Values.logStore.service.httpEndpoint.enabled }}
    - port: {{ .Values.logStore.service.httpEndpoint.port }}
      protocol: TCP
      name: http-server
      targetPort: 8080
{{- end }}
    - name: grpc-server
      protocol: TCP
      port: {{ .Values.logStore.service.grpc.port }}
      targetPort: 50051

{{- end}}
