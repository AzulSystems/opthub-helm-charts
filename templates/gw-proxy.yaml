{{- if .Values.gwProxy.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gw-proxy
  namespace: {{ .Release.Namespace }}
  labels:
    app: gw-proxy
data:
  "envoy.yaml": |
{{ include "envoy.config" . | indent 4}}
  "cds.yaml": |
{{ include "envoy.cds" . | indent 4}}
  "lds.yaml": |
{{ include "envoy.lds" . | indent 4}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gw-proxy
  namespace: {{ .Release.Namespace }}
  labels:
    app: gw-proxy
    {{- if .Values.gwProxy.applicationLabels }}
    {{- .Values.gwProxy.applicationLabels | toYaml | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.gwProxy.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app: gw-proxy
  template:
    metadata:
      labels:
        app: gw-proxy
        {{- if .Values.gwProxy.podTemplateLabels }}
        {{- .Values.gwProxy.podTemplateLabels | toYaml | nindent 8 }}
        {{- end }}
      annotations:
        checksum/envoy: {{ printf "%s%s%s" (include "envoy.config" .) (include "envoy.cds" .) (include "envoy.lds" .) | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/stats/prometheus"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        fsGroup: 65532
      containers:
        - name: gw-proxy
          image: {{ .Values.registry.dockerhubMirror }}envoyproxy/envoy:distroless-v1.29-latest
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
          {{- if .Values.gwProxy.command }}
          command: {{- .Values.gwProxy.command | toYaml | nindent 10 }}
          {{- end }}
          args:
            - "-c /etc/envoy/envoy.yaml"
            - "-l warn"
          ports:
            - name: admin
              containerPort: 8000
            - name: svc
              containerPort: 8001
            - name: http
              containerPort: 8080
            - name: grpc
              containerPort: 50051
          volumeMounts:
            - name: config
              mountPath: "/etc/envoy"
              readOnly: true
{{- if .Values.ssl.enabled }}
            - mountPath: "/opt/ssl"
              name: ssl-cert
              readOnly: true
{{- end }}
{{- if .Values.gwProxy.resources }}
          resources: {{- .Values.gwProxy.resources | toYaml | nindent 12 }}
{{- end }}
      volumes:
        - name: config
          configMap:
            name: gw-proxy
{{- if .Values.ssl.enabled }}
        - name: ssl-cert
          secret:
            secretName: {{ include "ssl.secretName" . }}
{{- end }}
{{- if eq true .Values.gwProxy.azureVirtualNodes }}
      nodeSelector:
        kubernetes.io/role: agent
        kubernetes.io/os: linux
        type: virtual-kubelet
{{- else if .Values.gwProxy.nodeSelector }}
      nodeSelector: {{- .Values.gwProxy.nodeSelector | toYaml | nindent 8 }}
{{- end }}
{{- if eq true .Values.gwProxy.azureVirtualNodes }}
      tolerations:
        - key: virtual-kubelet.io/provider
          operator: Exists
        - key: azure.com/aci
          effect: NoSchedule
{{- else if .Values.gwProxy.tolerations }}
      tolerations: {{- .Values.gwProxy.tolerations | toYaml | nindent 8 }}
{{- end }}
{{- if .Values.gwProxy.affinity }}
      affinity: {{- .Values.gwProxy.affinity | toYaml | nindent 8 }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: gateway-headless
  namespace: {{ .Release.Namespace }}
  labels:
    app: gateway
    {{- if .Values.gwProxy.serviceLabels }}
    {{- .Values.gwProxy.serviceLabels | toYaml | nindent 4 }}
    {{- end }}
spec:
  clusterIP: None
  ports:
{{- if .Values.gateway.service.httpEndpoint.enabled }}
    - port: {{ .Values.gateway.service.httpEndpoint.port }}
      protocol: TCP
      name: http
      targetPort: 8080
{{- end }}
    - port: {{ .Values.gateway.service.grpc.port }}
      protocol: TCP
      name: grpc
      targetPort: {{ .Values.gateway.ports.serviceGrpcPort }}
  selector:
    app: gateway
{{- if and ((.Values.logStore).enabled) (eq ((.Values.logStore).deploymentMode) "dedicatedService")  }}
---
apiVersion: v1
kind: Service
metadata:
  name: log-store-headless
  namespace: {{ .Release.namespace }}
  labels:
    app: log-store
spec:
  clusterIP: None
  ports:
    - port: 50051
      protocol: TCP
      name: grpc
      targetPort: 50051
  selector:
    app: log-store
{{- end }}
{{- if and .Values.autoscaler .Values.gwProxy.autoscaler.enabled}}
{{- if eq "hpa" .Values.gwProxy.autoscaler.mode}}
---
# Dependence on metric-server
{{- if .Capabilities.APIVersions.Has "autoscaling/v2" }}
apiVersion: autoscaling/v2
{{- else }}
apiVersion: autoscaling/v2beta2
{{- end }}
kind: HorizontalPodAutoscaler
metadata:
  name: gw-proxy
  namespace: {{ .Release.Namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gw-proxy
  minReplicas: {{ .Values.gwProxy.autoscaler.min }}
  maxReplicas: {{ .Values.gwProxy.autoscaler.max }}
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
{{- end }}
{{- end }}
{{- end }}
